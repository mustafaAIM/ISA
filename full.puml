@startuml full_diagram

set namespaceSeparator none

' Package Definitions
package "game" as game {
}
package "game.Game" as game.Game {
}
package "game.board" as game.board {
}
package "game.flower" as game.flower {
}
package "game.hole" as game.hole {
}
package "game.main" as game.main {
}
package "game.move_generator" as game.move_generator {
}
package "game.nut" as game.nut {
}
package "game.render" as game.render {
}
package "game.squirrel" as game.squirrel {
}
package "game.squirrelL" as game.squirrelL {
}
package "game.state" as game.state {
}
package "game.states_manager" as game.states_manager {
}

' Package Relationships
game --> game.Game
game --> game.board
game --> game.flower
game --> game.hole
game --> game.move_generator
game --> game.nut
game --> game.render
game --> game.squirrel
game --> game.squirrelL
game --> game.state
game --> game.states_manager
game.Game --> game.board
game.Game --> game.move_generator
game.Game --> game.squirrel
game.board --> game.flower
game.board --> game.hole
game.board --> game.render
game.board --> game.squirrel
game.board --> game.squirrelL
game.main --> game.Game
game.main --> game.board
game.main --> game.flower
game.main --> game.nut
game.main --> game.render
game.main --> game.squirrel
game.main --> game.squirrelL
game.main --> game.states_manager
game.move_generator --> game.state
game.nut --> game.hole
game.render --> game.flower
game.render --> game.squirrel
game.render --> game.squirrelL
game.squirrelL --> game.squirrel
game.states_manager --> game.state

' Class Definitions and Relationships
class "Board" as game.board.Board {
  holes : list
  pieces : list
  size : tuple
  add_piece(piece)
  can_move(piece, direction)
  get_state()
  is_game_end()
  move_piece(piece, direction)
  print_board()
}
class "BoardRenderer" as game.render.BoardRenderer {
  board
  symbols : dict
  play()
  render_board()
}
class "Flower" as game.flower.Flower {
  positions : list
}
class "Game" as game.Game.Game {
  board
  current_state : NoneType
  move_generator
  renderer
  state_manager
  get_possible_moves_for_piece(piece)
  play()
}
class "GameState" as game.state.GameState {
  action : NoneType
  board
  cost : int
  depth : int
  parent : NoneType
  get_path()
}
class "Hole" as game.hole.Hole {
  status : bool
  x
  y
}
class "MoveGenerator" as game.move_generator.MoveGenerator {
  board
  generate_possible_moves(piece, current_state)
}
class "Nut" as game.nut.Nut {
}
class "Squirrel" as game.squirrel.Squirrel {
  nut
  positions
  move(direction)
}
class "SquirrelL" as game.squirrelL.SquirrelL {
}
class "StateManager" as game.states_manager.StateManager {
  states : list
  clear_states()
  get_last_state()
  get_state_path(end_state)
  save_state(board, parent, action, depth, cost)
}
game.nut.Nut --|> game.hole.Hole
game.squirrelL.SquirrelL --|> game.squirrel.Squirrel
game.move_generator.MoveGenerator --* game.Game.Game : move_generator

footer Generated by //py2puml//
@enduml